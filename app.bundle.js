!function(e){function t(t){for(var r,a,o=t[0],c=t[1],i=t[2],l=0,u=[];l<o.length;l++)a=o[l],Object.prototype.hasOwnProperty.call(k,a)&&k[a]&&u.push(k[a][0]),k[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(U&&U(t);u.length;)u.shift()();return P.push.apply(P,i||[]),n()}function n(){for(var e,t=0;t<P.length;t++){for(var n=P[t],r=!0,a=1;a<n.length;a++){var o=n[a];0!==k[o]&&(r=!1)}r&&(P.splice(t--,1),e=M(M.s=n[0]))}return e}var r=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!w[e]||!O[e])return;for(var n in O[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0==--b&&0===g&&x()}(e,t),r&&r(e,t)};var a,o=!0,c="8f805e25e5dc2694b6e8",i={},l=[],u=[];function s(t){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:a!==t,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,f){case"idle":(y={})[t]=e[t],p("ready");break;case"ready":C(t);break;case"prepare":case"check":case"dispose":case"apply":(v=v||[]).push(t)}},check:D,apply:_,status:function(e){if(!e)return f;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[t]};return a=void 0,n}var d=[],f="idle";function p(e){f=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var m,y,h,v,b=0,g=0,E={},O={},w={};function j(e){return+e+""===e?+e:e}function D(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return o=e,p("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=M.p+""+c+".hot-update.json";r.open("GET",a,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p(I()?"ready":"idle"),null;O={},E={},w=e.c,h=e.h,p("prepare");var t=new Promise((function(e,t){m={resolve:e,reject:t}}));for(var n in y={},k)S(n);return"prepare"===f&&0===g&&0===b&&x(),t}));var t}function S(e){w[e]?(O[e]=!0,b++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=M.p+""+e+"."+c+".hot-update.js",document.head.appendChild(t)}(e)):E[e]=!0}function x(){p("ready");var e=m;if(m=null,e)if(o)Promise.resolve().then((function(){return _(o)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(j(n));e.resolve(t)}}function _(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");return function t(n){var r,o,u,s,d;function f(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var a=r.pop(),o=a.id,c=a.chain;if((s=A[o])&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:o};if(s.hot._main)return{type:"unaccepted",chain:c,moduleId:o};for(var i=0;i<s.parents.length;i++){var l=s.parents[i],u=A[l];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:c.concat([l]),moduleId:o,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[o]?(n[l]||(n[l]=[]),m(n[l],[o])):(delete n[l],t.push(l),r.push({chain:c.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}I();var b={},g=[],E={},O=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var D in y)if(Object.prototype.hasOwnProperty.call(y,D)){var S;d=j(D),S=y[D]?f(d):{type:"disposed",moduleId:D};var x=!1,_=!1,C=!1,P="";switch(S.chain&&(P="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(x=new Error("Aborted because of self decline: "+S.moduleId+P));break;case"declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+P));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(S),n.ignoreUnaccepted||(x=new Error("Aborted because "+d+" is not accepted"+P));break;case"accepted":n.onAccepted&&n.onAccepted(S),_=!0;break;case"disposed":n.onDisposed&&n.onDisposed(S),C=!0;break;default:throw new Error("Unexception type "+S.type)}if(x)return p("abort"),Promise.reject(x);if(_)for(d in E[d]=y[d],m(g,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,d)&&(b[d]||(b[d]=[]),m(b[d],S.outdatedDependencies[d]));C&&(m(g,[S.moduleId]),E[d]=O)}var H,T=[];for(o=0;o<g.length;o++)d=g[o],A[d]&&A[d].hot._selfAccepted&&E[d]!==O&&!A[d].hot._selfInvalidated&&T.push({module:d,parents:A[d].parents.slice(),errorHandler:A[d].hot._selfAccepted});p("dispose"),Object.keys(w).forEach((function(e){!1===w[e]&&function(e){delete k[e]}(e)}));var R,U,B=g.slice();for(;B.length>0;)if(d=B.pop(),s=A[d]){var F={},q=s.hot._disposeHandlers;for(u=0;u<q.length;u++)(r=q[u])(F);for(i[d]=F,s.hot.active=!1,delete A[d],delete b[d],u=0;u<s.children.length;u++){var N=A[s.children[u]];N&&((H=N.parents.indexOf(d))>=0&&N.parents.splice(H,1))}}for(d in b)if(Object.prototype.hasOwnProperty.call(b,d)&&(s=A[d]))for(U=b[d],u=0;u<U.length;u++)R=U[u],(H=s.children.indexOf(R))>=0&&s.children.splice(H,1);p("apply"),void 0!==h&&(c=h,h=void 0);for(d in y=void 0,E)Object.prototype.hasOwnProperty.call(E,d)&&(e[d]=E[d]);var L=null;for(d in b)if(Object.prototype.hasOwnProperty.call(b,d)&&(s=A[d])){U=b[d];var z=[];for(o=0;o<U.length;o++)if(R=U[o],r=s.hot._acceptedDependencies[R]){if(-1!==z.indexOf(r))continue;z.push(r)}for(o=0;o<z.length;o++){r=z[o];try{r(U)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:d,dependencyId:U[o],error:e}),n.ignoreErrored||L||(L=e)}}}for(o=0;o<T.length;o++){var G=T[o];d=G.module,l=G.parents,a=d;try{M(d)}catch(e){if("function"==typeof G.errorHandler)try{G.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,originalError:e}),n.ignoreErrored||L||(L=t),L||(L=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:d,error:e}),n.ignoreErrored||L||(L=e)}}if(L)return p("fail"),Promise.reject(L);if(v)return t(n).then((function(e){return g.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return p("idle"),new Promise((function(e){e(g)}))}(t=t||{})}function I(){if(v)return y||(y={}),v.forEach(C),v=void 0,!0}function C(t){Object.prototype.hasOwnProperty.call(y,t)||(y[t]=e[t])}var A={},k={0:0},P=[];function M(t){if(A[t])return A[t].exports;var n=A[t]={i:t,l:!1,exports:{},hot:s(t),parents:(u=l,l=[],u),children:[]};return e[t].call(n.exports,n,n.exports,function(e){var t=A[e];if(!t)return M;var n=function(n){return t.hot.active?(A[n]?-1===A[n].parents.indexOf(e)&&A[n].parents.push(e):(l=[e],a=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),l=[]),M(n)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return M[e]},set:function(t){M[e]=t}}};for(var o in M)Object.prototype.hasOwnProperty.call(M,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(n,o,r(o));return n.e=function(e){return"ready"===f&&p("prepare"),g++,M.e(e).then(t,(function(e){throw t(),e}));function t(){g--,"prepare"===f&&(E[e]||S(e),0===g&&0===b&&x())}},n.t=function(e,t){return 1&t&&(e=n(e)),M.t(e,-2&t)},n}(t)),n.l=!0,n.exports}M.m=e,M.c=A,M.d=function(e,t,n){M.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},M.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},M.t=function(e,t){if(1&t&&(e=M(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(M.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)M.d(n,r,function(t){return e[t]}.bind(null,r));return n},M.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return M.d(t,"a",t),t},M.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},M.p="",M.h=function(){return c};var H=window.webpackJsonp=window.webpackJsonp||[],T=H.push.bind(H);H.push=t,H=H.slice();for(var R=0;R<H.length;R++)t(H[R]);var U=T;P.push([149,1]),n()}({146:function(e,t,n){var r=n(147),a=n(69);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},c=r(a,o);if(!a.locals||e.hot.invalidate){var i=a.locals;e.hot.accept(69,(function(){"string"==typeof(a=(a=n(69)).__esModule?a.default:a)&&(a=[[e.i,a,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(i,a.locals)?(i=a.locals,c(a)):e.hot.invalidate()}))}e.hot.dispose((function(){c()})),e.exports=a.locals||{}},149:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(14),c=n.n(o),i=n(187),l=n(191),u=n(67),s=n(192),d=function(e){var t=e.children;return a.a.createElement(a.a.Fragment,null,a.a.createElement(i.a,null,a.a.createElement(l.a,null,a.a.createElement(u.a,{variant:"h6"},"Coronavirus(COVID-19) outbreak tracker"))),a.a.createElement(l.a,null),a.a.createElement(l.a,null),a.a.createElement(s.a,{container:!0},a.a.createElement(s.a,{item:!0,xs:2}),a.a.createElement(s.a,{item:!0,xs:8},t),a.a.createElement(s.a,{item:!0,xs:2})))},f=n(208),p=n(207),m=n(32),y={covid:{summaryData:{},countryDataByDate:[],setSummaryData:Object(m.b)((function(e,t){e.summaryData=t})),setCountryDataByDate:Object(m.b)((function(e,t){e.countryDataByDate=t}))}},h=Object(m.c)(y),v=Object(m.d)(),b=v.useStoreActions,g=(v.useStoreDispatch,v.useStoreState);function E(){return(E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var O=function(e){var t=e.selectedCountry,n=e.setSelectedCountry,r=g((function(e){return e.covid.summaryData.Countries}));return a.a.createElement(f.a,{value:t,onChange:function(e,t){n(t)},id:"combo-box-countries",options:null!=r?r:[],getOptionLabel:function(e){var t;return null!==(t=e.Country)&&void 0!==t?t:"Loading..."},style:{width:300},clearOnEscape:!0,renderInput:function(e){return a.a.createElement(p.a,E({},e,{label:"Country",variant:"standard"}))}})},w=n(195),j=n(212),D=n(196),S=n(197),x=n(198),_=function(e){var t=e.TotalConfirmed;return a.a.createElement(a.a.Fragment,null,a.a.createElement(s.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},a.a.createElement(s.a,{item:!0},a.a.createElement(u.a,{variant:"h6",component:"h2",color:"primary"},"Total Confirmed")),a.a.createElement(s.a,{item:!0},a.a.createElement(u.a,{variant:"body2",color:"primary"},t))))},I=function(e){var t=e.TotalDeaths;return a.a.createElement(a.a.Fragment,null,a.a.createElement(s.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},a.a.createElement(s.a,{item:!0},a.a.createElement(u.a,{variant:"h6",component:"h2",color:"error"},"Total Deaths")),a.a.createElement(s.a,{item:!0},a.a.createElement(u.a,{variant:"body2",color:"error"},t))))},C=function(e){var t=e.TotalRecovered;return a.a.createElement(s.a,{container:!0,direction:"column",justify:"center",alignItems:"center"},a.a.createElement(s.a,{item:!0},a.a.createElement(u.a,{variant:"h6",component:"h2",style:{color:"green"}},"Total Recovered")),a.a.createElement(s.a,{item:!0},a.a.createElement(u.a,{variant:"body2",style:{color:"green"}},t)))};var A=Object(w.a)((function(e){return Object(j.a)({root:(t={maxWidth:800,width:"auto"},n=e.breakpoints.up("sm"),r={width:600,flexShrink:0},n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t)});var t,n,r})),k=function(e){var t=e.title,n=e.selectedCountry,r=A(),o=n.TotalConfirmed,c=n.TotalDeaths,i=n.TotalRecovered;return a.a.createElement(D.a,null,a.a.createElement(S.a,{title:t,style:{textAlign:"center"}}),a.a.createElement(x.a,{className:r.root},a.a.createElement(s.a,{container:!0,justify:"space-around",alignItems:"center"},a.a.createElement(s.a,{item:!0,sm:4,xs:12},a.a.createElement(_,{TotalConfirmed:o})),a.a.createElement(s.a,{item:!0,sm:4,xs:12},a.a.createElement(I,{TotalDeaths:c})),a.a.createElement(s.a,{item:!0,sm:4,xs:12},a.a.createElement(C,{TotalRecovered:i})))))},P=n(6),M=n(202),H=n(204),T=n(199),R=n(201),U=n(203),B=n(200),F=n(104),q=n(72),N=Object(P.a)((function(e){return Object(j.a)({head:{backgroundColor:e.palette.primary.main,color:e.palette.common.white},body:{fontSize:14}})}))(T.a),L=Object(P.a)((function(e){return Object(j.a)({root:{"&:nth-of-type(odd)":{backgroundColor:e.palette.action.hover}}})}))(B.a),z=Object(w.a)({table:{}}),G=function(){var e=z(),t=g((function(e){return e.covid.countryDataByDate}));return a.a.createElement(R.a,{component:F.a},a.a.createElement(M.a,{className:e.table,"aria-label":"customized table"},a.a.createElement(U.a,null,a.a.createElement(B.a,null,a.a.createElement(N,null,"Date"),a.a.createElement(N,{align:"right"},"Confirmed"),a.a.createElement(N,{align:"right"},"Deaths"),a.a.createElement(N,{align:"right"},"Recovered"))),a.a.createElement(H.a,null,t.map((function(e){return a.a.createElement(L,{key:e.Date},a.a.createElement(N,{component:"th",scope:"row"},e.Date?Object(q.a)(Date.parse(e.Date),2).toDateString():null),a.a.createElement(N,{align:"right"},e.Confirmed),a.a.createElement(N,{align:"right"},e.Deaths),a.a.createElement(N,{align:"right"},e.Recovered))})))))},J=n(206),X=n(100),Y=n(99),Z=n.n(Y),$=n(102),V=Z.a.create({baseURL:"https://api.covid19api.com",timeout:1e3});function W(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(r=(c=i.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==i.return||i.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return K(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return K(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Q=function(e){var t=e.selectedCountry,n=W(Object(r.useState)(new Date),2),o=n[0],c=n[1],i=W(Object(r.useState)(new Date),2),l=i[0],d=i[1],f=b((function(e){return e.covid.setCountryDataByDate}));Object(r.useEffect)((function(){var e;null===(e=function(e,t,n){if(e&&t&&n){var r="".concat(Object($.a)(Object(q.a)(t,-1),"yyyy-MM-dd"),"T00:00:00Z"),a="".concat(Object($.a)(Object(q.a)(n,-1),"yyyy-MM-dd"),"T23:59:59Z");return V.get("/country/".concat(e.Slug),{params:{from:r,to:a}})}}(t,o,l))||void 0===e||e.then((function(e){return e.data})).then(f)}),[t,o,l,f]);var p=!Object(X.a)(o,l);return a.a.createElement(a.a.Fragment,null,a.a.createElement(s.a,{item:!0,sm:p?2:4,xs:12},a.a.createElement(u.a,{variant:"h5"},"Select a date period:")),a.a.createElement(s.a,{item:!0,sm:p?2:4,xs:12},a.a.createElement(J.a,{label:"".concat(p?"Initial":""," Date"),value:o,maxDate:new Date,onChange:function(e){c(e),d(new Date)},animateYearScrolling:!0})),p&&a.a.createElement(s.a,{item:!0,sm:2,xs:12},a.a.createElement(J.a,{label:"Final Date",minDate:o,maxDate:new Date,value:l,onChange:function(e){return d(e)},animateYearScrolling:!0})))};function ee(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(r=(c=i.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==i.return||i.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return te(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ne=function(){var e,t,n=ee(a.a.useState(null),2),o=n[0],c=n[1],i=b((function(e){return e.covid.setSummaryData})),l=g((function(e){return e.covid.summaryData.Global}));return Object(r.useEffect)((function(){V.get("/summary").then((function(e){return e.data})).then((function(e){return i(e)}))}),[i]),a.a.createElement(d,null,a.a.createElement(s.a,{container:!0,direction:"row",justify:"center",alignItems:"center",spacing:4,style:{marginBottom:16}},a.a.createElement(s.a,{item:!0},a.a.createElement(u.a,{variant:"h5"},"Select a country to retrieve data from:")),a.a.createElement(s.a,{item:!0},a.a.createElement(O,{selectedCountry:o,setSelectedCountry:c}))),a.a.createElement(s.a,{container:!0,justify:"center",alignItems:"center",spacing:4,style:{marginBottom:16}},a.a.createElement(s.a,{item:!0},a.a.createElement(k,{title:"".concat(null!==(e=null==o?void 0:o.Country)&&void 0!==e?e:"Global"," cases today"),selectedCountry:null!==(t=null!=o?o:l)&&void 0!==t?t:{}})),o&&a.a.createElement(s.a,{container:!0,direction:"row",justify:"center",alignItems:"center",spacing:4,style:{textAlign:"center",marginBottom:16}},a.a.createElement(Q,{selectedCountry:o}),a.a.createElement(s.a,{item:!0,xs:12,style:{marginBottom:16}},a.a.createElement(G,null)))))},re=(n(146),n(205)),ae=n(17),oe=n(101);c.a.render(a.a.createElement(a.a.StrictMode,null,a.a.createElement(m.a,{store:h},a.a.createElement(ae.a,{utils:oe.a},a.a.createElement(re.a,null),a.a.createElement(ne,null)))),document.getElementById("root"))},69:function(e,t,n){(t=n(148)(!1)).push([e.i,"body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans',\n    'Droid Sans', 'Helvetica Neue', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n}\n",""]),e.exports=t}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,